"""Logs users in and out of the site, and exposes user properties from the DB.This module is used to manage the User requesting a page on the site.Requests come with a name/password cookie that is used to pull user information back out of the database.If there is no cookie, or if an invalid user is set, use the Guest user.Interacts with:* Cookies sent in this page request* Database with user info* Cookies to be sent out with the response"""from StandardVars import user,dbimport ConvDBimport SuperHashclass Error(Exception):passclass NoTopicError(Error):passclass Thread(SuperHash.ProxyMixin):	def __init__(self, id, getEntries=True):		thread = db.loadRow('thread', id)		if thread is None:			raise NoTopicError, "No topic %s in database" % id					self._thread = thread		SuperHash.ProxyMixin.__init__(self, self._thread)				if getEntries:			self.entries = ConvDB.GetThreadEntries(self.id, user.IsWriter(), link=True)		def postedByAskee(self):		return self.entries[0].aname is not None		def Clean(self):		db.execute("delete from entry where flag='s' and thread=%s", self._thread.id)		ConvDB.SetThreadProps(self._thread)		self._thread.done = 'y'			def Update(self):		self._thread._Update(db)				def isLive(self):		return self._thread.deleted == "n" and self._thread.active == "y"			def isActive(self):		return self.isLive() and self._thread.done == 'n'			def canWrite(self):		return self._thread.done == 'n' and self._thread.deleted == 'n'			def __setattr__(self,name,value):		"Act as a proxy for the user db row"		if not name.startswith('_'):			if name in self._thread: 				SuperHash.ProxyMixin.__setattr__(self,name,value)				return		object.__setattr__(self,name,value)