"""Logs users in and out of the site, and exposes user properties from the DB.This module is used to manage the User requesting a page on the site.Requests come with a name/password cookie that is used to pull user information back out of the database.If there is no cookie, or if an invalid user is set, use the Guest user.Interacts with:* Cookies sent in this page request* Database with user info* Cookies to be sent out with the response"""import osimport base64import Cookieimport ConvDBfrom buff import OutCookieVersion = 1MaxName = 12MaxPasswd = 12class Error(Exception): passclass InvalidUserError(Error): passclass InvalidPasswordError(Error): passdef Current(db):	"""Retreive the current user		Read the current request's cookie and retreive that user from the database,	assuming the passwords match.		If there are any problems loading the user, or the current user isn't logged	in, then return a Guest user account.	"""		try:		(name, password) = _read_cookie()		return Get(db, name, password)	except:		return Guest(db)def Guest(db):	"""Return a Guest user account"""	user_row = db.newRow('user', {'name': 'Guest', 'usertype': User.GUEST})	return User(user_row)	def Get(db, name, password):	"""Get the specified user from the db, checking passwords"""	user_row = db.loadRow('user', name, 'name')		if user_row is None:		raise InvalidUserError, "Unknown user '%s'" % (name,)			if user_row.passwd != password:		raise InvalidPasswordError, "Invalid password for user '%s'" % (name,)	return User(user_row)def Create(db, username, password, gender='n'):	"""Create a new user in the db"""	existing_id = db.loadValue('select id from user where name="%s"', (username,))	if existing_id is not None:		raise InvalidUserError, "User '%s' already exists" % (username,)	user_row = db.newRow('user',		{		'name': username,		'passwd': password,		'usertype': User.READER,		'created': db.date(),		'gender': gender		})			user_row._Store(db)	return User(user_row)def SignOut():	"""Log out the current user (by deleting the user cookie)"""	buff = Out.get()	buff.cookies['user'] = ''	buff.cookies['user']['path'] = '/'	buff.cookies['user']['expires'] = -1class User(object):	"""A class representing a Conversatron user"""	GUEST = 0	READER = 1	WRITER = 2	ADMIN = 3	GOD = 4				def SignIn(self):		"""Log in this user (by setting a cookie)"""		buff = Out.get()				creme = _enscramble('%i-%s-%s' % 			(CookieVersion, self._user.name, self._user.passwd))		buff.cookies['user'] = creme		buff.cookies['user']['path'] = '/'		buff.cookies['user']['expires'] = 20000000			def Update(self, db):		"""Update the user in the db				Saves any changes made to this user back to the database."""		if self.IsGuest(): return;				db.updateRow('user',self._user)	def __init__(self, _user):		"""Initialize a User with a row from the user db"""		self._user = _user		self._favorites= None			def IsBanned(self): return self._user.banned != 'n'		def IsGuest(self): return self._user.usertype == User.GUEST	def IsRegistered(self): return not self.IsGuest()		def IsActive(self): 		"""Is the current user registered and not banned?"""		return self.IsRegistered() and not self.IsBanned()		def IsReader(self): return self._user.usertype == User.READER		def IsWriter(self): return self._user.usertype >= User.WRITER	def IsAdmin(self): return self._user.usertype >= User.ADMIN	def IsGod(self): return self._user.usertype >= User.GOD		def __getattr__(self,name):		"Act as a proxy for the user db row"		return self._user.__getattr__(name)			def __setattr__(self,name,value):		"Act as a proxy for the user db row"		if name.startswith('_'):			object.__setattr__(self,name,value)		else:			self._user.__setattr__(name,value)				def Favorites(self):		if self._favorites is None:			self._favorites = ConvDB.GetUserFavorites(self._user)				return self._favoritesdef HostileCharacters(text):	"Test if text has any HTML or SQL hostile characters."		hostilechars = "<>&;-%"	for ch in hostilechars:		if ch in text:			return True			return Falsedef _enscramble(str):	"Encodes a string to stuff in our cookie"		enc = base64.encodestring(str)	enc = enc[:-1]	enc = enc.replace('=', '+')	return encdef _descramble(str):	"Decodes the cream of a cookie"		str = str.replace('+', '=')	return base64.decodestring(str+'\012')def _read_cookie():	"""Decode the user cookie"""	cook = Cookie.SimpleCookie(os.environ.get("HTTP_COOKIE", ''))	creme = _descramble(cook['user'].value)	(version, name, password) = creme.split('-')		if int(version) != CookieVersion:		raise Error, "Invalid cookie version"			if (len(name) > MaxName) or (len(password) > MaxPasswd):		raise Error, "Value too long"		if HostileCharacters(name+password):		raise Error, "Invalid characters"			return (name, password)